// ===================================================================================
// GEE脚本：最终版矿区属性批量处理脚本 (A/B分类版)
// 目的：1. 将所有矿区分为A类(历史遗留/模式复杂)和B类(本世纪活跃)。
//       2. 仅对B类矿区，计算其从“开采前”到“2023年”的强度变化指标。
// ===================================================================================

// ----------------------------- 全局设置 -----------------------------
var mineAreas = ee.FeatureCollection(table);

var CONFIG = {
  startYear: 1986,
  endYear: 2024,
  growingSeasonStart: 4,
  growingSeasonEnd: 10,
};

// 数据集定义
var s2Collection = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED').select(['B4','B8','SCL']);
var l8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2').select(['SR_B4','SR_B5','QA_PIXEL'], ['RED','NIR','QA_PIXEL']);
var l7 = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2').select(['SR_B3','SR_B4','QA_PIXEL'], ['RED','NIR','QA_PIXEL']);
var l5 = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2').select(['SR_B3','SR_B4','QA_PIXEL'], ['RED','NIR','QA_PIXEL']);
var mergedLandsatCollection = ee.ImageCollection(l5.merge(l7).merge(l8));

// ----------------------------- 核心分析函数 (纯服务器端) -----------------------------
var enrichMineFeature = function(feature) {
  var geom = feature.geometry().simplify(100);
  
  // 1. 生成长时间序列NDVI
  var years = ee.List.sequence(CONFIG.startYear, CONFIG.endYear);
  var annualNdvi = ee.FeatureCollection(years.map(function(year) {
    year = ee.Number(year);
    var collection;
    if(year.gte(2022)) {
        var l9 = ee.ImageCollection('LANDSAT/LC09/C02/T1_L2').select(['SR_B4','SR_B5','QA_PIXEL'],['RED','NIR','QA_PIXEL']);
        collection = l8.merge(l9);
    } else if(year.gte(2013)) {
        collection = l8;
    } else if(year.gte(1999)) {
        collection = l7.merge(l5);
    } else {
        collection = l5;
    }
    
    var filtered = collection.filterBounds(geom).filter(ee.Filter.calendarRange(year, year, 'year'));
    if(year.gte(2000) && year.lte(2003)){
      filtered = filtered.filter(ee.Filter.calendarRange(CONFIG.growingSeasonStart, CONFIG.growingSeasonEnd, 'month'));
    }
    
    var cloudMask = function(image) {
      var qa = image.select('QA_PIXEL');
      var mask = qa.bitwiseAnd(1 << 3).eq(0).and(qa.bitwiseAnd(1 << 4).eq(0)); // cloud and cloud shadow
      return image.updateMask(mask);
    };
    
    var ndvi = filtered.map(cloudMask).map(function(img){
      var scaled = img.select(['RED', 'NIR']).multiply(0.0000275).add(-0.2);
      return scaled.normalizedDifference(['NIR', 'RED']).rename('NDVI');
    });
    
    // 对L7条带进行修复
    if (year.gte(2003)) {
      var filled = ndvi.map(function(img) {
        return img.focal_mean(3.5, 'square', 'pixels', 1).blend(img);
      });
      ndvi = filled;
    }
    
    var annualMax = ee.Image(ee.Algorithms.If(
      ndvi.size().gt(0),
      ndvi.qualityMosaic('NDVI'),
      ee.Image.constant(0).rename('NDVI').mask(ee.Image.constant(0))
    ));
    
    var meanVal = annualMax.reduceRegion({
      reducer: ee.Reducer.mean(), geometry: geom, scale: 30, maxPixels: 1e9, bestEffort: true
    }).get('NDVI');
    
    return ee.Feature(null, {'year': year, 'ndvi': meanVal});
  })).filter(ee.Filter.notNull(['ndvi']));

  // 2. 生命周期分类 (纯服务器端实现)
  var ndviList = annualNdvi.aggregate_array('ndvi');
  var yearList = annualNdvi.aggregate_array('year');
  var listSize = ndviList.size();

  var peakInfo = ee.List.sequence(2, listSize.subtract(3)).iterate(function(i, prevInfo){
      prevInfo = ee.Dictionary(prevInfo);
      i = ee.Number(i);
      var year = ee.Number(yearList.get(i));
      return ee.Algorithms.If(year.gte(2000).and(ee.Number(prevInfo.get('year')).eq(-1)),
        (function(){
          var isPeak = ee.Number(ndviList.get(i)).gt(ndviList.get(i.subtract(1)))
                      .and(ee.Number(ndviList.get(i)).gt(ndviList.get(i.add(1))));
          var isSignificantDrop = ee.Number(ndviList.get(i)).subtract(ndviList.get(i.add(2))).gt(0.02);
          return ee.Algorithms.If(isPeak.and(isSignificantDrop), 
                                  ee.Dictionary({year: year}), 
                                  prevInfo);
        })(),
        prevInfo
      );
  }, ee.Dictionary({year: -1}));
  
  var startYear = ee.Number(ee.Dictionary(peakInfo).get('year'));

  // *** 核心修改：简化为A/B二元分类 ***
  // 如果找到了起始年份，则为B类；否则，为A类。
  var category = ee.String(ee.Algorithms.If(startYear.gt(0), 'B', 'A'));
  
  // *** 核心修改：使用 ee.Algorithms.If 对不同类别的矿区进行分类处理 ***
  var finalFeature = ee.Feature(ee.Algorithms.If(
    category.compareTo('B').eq(0), 
    // ---------------- 如果是B类，则计算所有强度变化指标 ----------------
    (function(){
      var endYear = 2023;
      var buffer = geom.buffer(1000).difference(geom, 10);
      
      var universalCloudMask = function(image, satellite) {
        var qaBand = (satellite === 'Sentinel-2') ? 'SCL' : 'QA_PIXEL';
        if (satellite === 'Sentinel-2') {
          var keep = [4, 5, 6, 7, 11];
          return image.updateMask(image.select(qaBand).remap(keep, ee.List.repeat(1, keep.length), 0));
        } else {
          var qa = image.select(qaBand);
          var cloudShadow = 1 << 4; var cloud = 1 << 3; var water = 1 << 7;
          return image.updateMask(qa.bitwiseAnd(cloudShadow).eq(0).and(qa.bitwiseAnd(cloud).eq(0)).and(qa.bitwiseAnd(water).eq(0)));
        }
      };
      
      var getComposite = function(yr, sat, col){
        var masked = col.filterBounds(geom)
                  .filter(ee.Filter.calendarRange(yr.subtract(1), yr.add(1), 'year'))
                  .map(function(img){return universalCloudMask(img, sat);});
        return masked.median();
      };
      
      var calcMetrics = function(image, satellite){
        return ee.Algorithms.If(image.bandNames().size(),
          (function(){
            var nir = image.select(satellite === 'Sentinel-2' ? 'B8' : 'NIR');
            var red = image.select(satellite === 'Sentinel-2' ? 'B4' : 'RED');
            var ndvi = nir.subtract(red).divide(nir.add(red).add(1e-6));
            var nirBandName = ee.String(nir.bandNames().get(0));
            var entropyBandName = nirBandName.cat('_ent');
            var entropy = nir.unitScale(0, 5000).multiply(63).toByte()
                             .glcmTexture({size: 2, average: true}).select(entropyBandName);
            var bnnc_in = ndvi.reduceRegion({reducer: ee.Reducer.mean(), geometry: geom, scale: satellite==='Sentinel-2'?10:30, tileScale:4}).get('nd');
            var bnnc_out= ndvi.reduceRegion({reducer: ee.Reducer.mean(), geometry: buffer, scale: satellite==='Sentinel-2'?10:30, tileScale:4}).get('nd');
            var bnec_in = entropy.reduceRegion({reducer: ee.Reducer.mean(), geometry: geom, scale: satellite==='Sentinel-2'?10:30, tileScale:4}).get(entropyBandName);
            var bnec_out= entropy.reduceRegion({reducer: ee.Reducer.mean(), geometry: buffer, scale: satellite==='Sentinel-2'?10:30, tileScale:4}).get(entropyBandName);
            return ee.Dictionary({bnnc_in: bnnc_in, bnnc_out: bnnc_out, bnec_in: bnec_in, bnec_out: bnec_out});
          })(),
          ee.Dictionary()
        );
      };
      
      var startComposite = getComposite(startYear, 'Landsat', mergedLandsatCollection);
      var endComposite = getComposite(ee.Number(endYear), 'Sentinel-2', s2Collection);
      
      var startMetrics = calcMetrics(startComposite, 'Landsat');
      var endMetrics = calcMetrics(endComposite, 'Sentinel-2');
      
      var metrics = ee.Dictionary({start: startMetrics, end: endMetrics});
      
      var bnnc_start = ee.Number(ee.Algorithms.If(ee.Dictionary(metrics.get('start')).contains('bnnc_in'),
          ee.Number(ee.Dictionary(metrics.get('start')).get('bnnc_out')).subtract(ee.Dictionary(metrics.get('start')).get('bnnc_in')).divide(ee.Dictionary(metrics.get('start')).get('bnnc_out')), null));
      var bnnc_end = ee.Number(ee.Algorithms.If(ee.Dictionary(metrics.get('end')).contains('bnnc_in'),
          ee.Number(ee.Dictionary(metrics.get('end')).get('bnnc_out')).subtract(ee.Dictionary(metrics.get('end')).get('bnnc_in')).divide(ee.Dictionary(metrics.get('end')).get('bnnc_out')), null));
      var bnec_start = ee.Number(ee.Algorithms.If(ee.Dictionary(metrics.get('start')).contains('bnec_in'),
          ee.Number(ee.Dictionary(metrics.get('start')).get('bnec_out')).subtract(ee.Dictionary(metrics.get('start')).get('bnec_in')).divide(ee.Dictionary(metrics.get('start')).get('bnec_out')), null));
      var bnec_end = ee.Number(ee.Algorithms.If(ee.Dictionary(metrics.get('end')).contains('bnec_in'),
          ee.Number(ee.Dictionary(metrics.get('end')).get('bnec_out')).subtract(ee.Dictionary(metrics.get('end')).get('bnec_in')).divide(ee.Dictionary(metrics.get('end')).get('bnec_out')), null));

      return feature.set({
        'lifecycle_category': category, 'start_year': startYear,
        'bnnc_start_value': bnnc_start, 'bnnc_end_value': bnnc_end,
        'bnec_start_value': bnec_start, 'bnec_end_value': bnec_end,
        'bnnc_change_rate': ee.Algorithms.If(bnnc_start, bnnc_end.subtract(bnnc_start).divide(bnnc_start.abs()), null),
        'bnec_change_rate': ee.Algorithms.If(bnec_start, bnec_end.subtract(bnec_start).divide(bnec_start.abs()), null)
      });
    })(),
    // ---------------- 如果是A类，则只返回分类结果，其他指标为空 ----------------
    feature.set({
      'lifecycle_category': category, 'start_year': null,
      'bnnc_start_value': null, 'bnnc_end_value': null,
      'bnec_start_value': null, 'bnec_end_value': null,
      'bnnc_change_rate': null, 'bnec_change_rate': null
    })
  ));
  
  return finalFeature;
};


// ----------------------------- 执行与导出 (测试模式) -----------------------------

// 1. 创建一个包含5个随机要素的测试子集
var testSubset = mineAreas.randomColumn().sort('random').limit(5);

// 2. 对测试子集应用核心分析函数
var processedSubset = testSubset.map(enrichMineFeature);

// 3. 在控制台打印预览
print('--- 测试运行结果 (5个随机矿区) ---');
print('处理完成后5个随机矿区属性预览 (Computing...):', processedSubset);

// 4. 为测试子集创建一个汇出任务
Export.table.toAsset({
  collection: processedSubset,
  description: 'Mine_OBJECTID_1_1-2k_Test_5',
  assetId: 'users/Loki_ChinaMiningResearch/Mine_OBJECTID_1_1-2k_Test_5' // 使用新的资产ID
});

print('测试子集的批次分析脚本已执行。请前往右上角的"Tasks"分頁，手動點擊"RUN"來啟動名為"Mine_OBJECTID_1_1-2k_Test_5"的匯出任务。');

